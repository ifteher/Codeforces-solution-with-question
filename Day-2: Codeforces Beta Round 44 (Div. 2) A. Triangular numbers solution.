Question:
A. Triangular numbers
time limit per test2 seconds
memory limit per test256 megabytes
A triangular number is the number of dots in an equilateral triangle uniformly filled with dots. For example, three dots can be arranged in a triangle; thus three is a triangular number. The n-th triangular number is the number of dots in a triangle with n dots on a side. . You can learn more about these numbers from Wikipedia (http://en.wikipedia.org/wiki/Triangular_number).

Your task is to find out if a given integer is a triangular number.

Input
The first line contains the single number n (1 ≤ n ≤ 500) — the given integer.

Output
If the given integer is a triangular number output YES, otherwise output NO.

Examples
InputCopy
1
OutputCopy
YES
InputCopy
2
OutputCopy
NO
InputCopy
3
OutputCopy
YES

solution:
#include <bits/stdc++.h>
using namespace std;

// Function to check if a number is triangular
bool isTriangular(int n) {
    int x = 1;
    while (true) {
        int triangularNumber = x * (x + 1) / 2;  // Calculate triangular number using formula
        if (triangularNumber == n) return true;  // If triangular number matches input, return true
        if (triangularNumber > n) return false;  // If triangular number exceeds input, return false
        x++;  // Increment to calculate the next triangular number
    }
}

int main() {
    int n;
    cin >> n; 
    if (isTriangular(n)) 
        cout << "YES" << endl;
    else 
        cout << "NO" << endl;
    return 0;
}
#OR:
Solution:
#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
#define  nn                     cout<<"NO"<<endl
#define  hh                     cout<<"YES"<<endl
#define all(x)                   x.begin(),x.end()
#define rall(x)                 x.rbegin(),x.rend()
#define ct(x)                   cout<<x<<endl
using namespace std;
using ll = long long;
bool isPrime(ll n)
{
    for(int i=2; i*i<=n; i++)   if(n%i==0) return false;
    return true;
}
ll gcd(ll a,ll b)
{
    return (__gcd(a,b));
}
ll lcm(ll a,ll b)
{
    return (a/(gcd(a,b))*b);
}
void sol();
int  main()
{
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    int t=1;
//    cin>>t;
    while(t--)talha();
    return 0;
}
void sol()
{
    int n;
    cin>>n;
    if(n==1)
    {
        hh;
        return ;
    }
    for(int i=1; i<n; i++)
    {
        if(n==(i*(i+1))/2)
        {
            hh;
            return;
        }
    }
    nn;
}

